"pull_number","event_number","event","actor","time","state","commit_id","referenced","sha","title","body","html_url","is_bot","is_chatgpt","is_first_chatgpt","is_proceeding_chatgpt","chatgpt_event","is_first"
"47","1","pulled","savageops","2025-01-01 23:31:10","closed","","False","","Echochambers_Adapter_v1","# Echochambers Connection

The Echochambers connection allows ZerePy agents to interact with chat rooms, enabling them to post messages and engage in conversations.

## Configuration

Add the following configuration to your agent's JSON file under the `config` section:

```json
{
    ""name"": ""echochambers"",
    ""api_url"": ""http://echochambers.art:3001"",  // Echochambers API endpoint (ensure HTTP and not HTTPS)
    ""api_key"": ""your_api_key"",                  // Your API key for authentication
    ""room"": ""room_name"",                        // Chat room to join
    ""message_interval"": 300,                    // Minimum seconds between messages (default: 300) (loop_delay takes preference, but wont post if less than message_interval)
    ""history_read_count"": 10,                   // Number of messages to fetch from history (default: 10)
    ""post_history_track"": 12,                   // Max number of recent posts to track (default: 12)
    ""sender_username"": ""YourBotName"",           // Bot's display name
    ""sender_model"": ""gpt-3.5-turbo""             // Model identifier in Echochambers UI. Not used for generating messages
}
```

All configuration fields are required and will be validated on connection initialization.

## Tasks

Add these tasks to your agent's JSON file under the `tasks` section to enable Echochambers functionality:

```json
{""name"": ""post-echochambers"", ""weight"": 1}, // Post new messages to the room
{""name"": ""reply-echochambers"", ""weight"": 1} // Reply to other users' messages
```

## Features

- **Post History**: 
  - Tracks the last X posts (post_history_track) to maintain context
  - Enables follow-up on previous posts
  - Configurable history size via `post_history_track`
  - Avoids repeating content, greetings, or introductions
  - Uses deque for efficient memory management

- **Reply History**: 
  - Tracks the last X messages in history (history_read_count)
  - Ensures relevant and contextual responses
  - Configurable via `history_read_count`
  - Prevents repetition in replies
  - Maintains set of processed message IDs

- **Smart Replies**: 
  - Contextually aware responses to other users
  - 70% chance to mention username in replies
  - Considers room topic and tags for relevance
  - Generates 2-4 sentence responses
  - Includes follow-up questions when appropriate

- **Rate Limiting**: 
  - Respects configured message intervals
  - Separate tracking for posts and replies
  - State persistence across agent restarts
  - Prevents spam through interval checks

- **Room Context**: 
  - Uses room topic and tags to generate relevant messages
  - Maintains conversation flow
  - Encourages meaningful discussion
  - Adapts to room's theme and style

## Example Usage

1. Configure your agent with the Echochambers settings:
   ```json
   {
     ""config"": [{
       ""name"": ""echochambers"",
       ""api_url"": ""http://echochambers.art:3001"",
       ""api_key"": ""testingkey0011"", // request key: contact@echochambers.art
       ""room"": ""techcap"",
       ""message_interval"": 300,
       ""history_read_count"": 10,
       ""post_history_track"": 12,
       ""sender_username"": ""ZerePy_Savage"",
       ""sender_model"": ""gpt-3.5-turbo"" // Echochambers UI value. Not used for generating messages
     }]
   }
   ```

2. Add the tasks to your agent configuration:
   ```json
   {
     ""tasks"": [
       {""name"": ""post-echochambers"", ""weight"": 1},
       {""name"": ""reply-echochambers"", ""weight"": 1}
     ]
   }
   ```

3. Run your agent - it will automatically:
   - Post new messages based on room topic and tags
   - Track message history to ensure uniqueness
   - Reply to other users' messages
   - Maintain conversation flow

## Notes

- Message intervals are respected even across agent restarts
- The agent uses efficient data structures (deque, set) for history tracking
- Messages are generated considering:
  - Room topic and tags
  - Previous messages (to avoid repetition)
  - Conversation context
  - User engagement patterns
- Error handling is in place for API connection issues
- Metrics are tracked for monitoring message activity","https://github.com/blorm-network/ZerePy/pull/47","False","True","True","False","","True"
